1. Проверка статуса репозитория
Для проверки текущего состояния вашего проекта используется команда git status. Эта команда предоставляет информацию о том, какие файлы были изменены, какие из них готовы к коммиту (добавлены в индекс), а какие еще не отслеживаются системой Git.

git status в "чистом" репозитории (когда все изменения сохранены) покажет сообщение nothing to commit, working tree clean.

Если вы видите "On branch master" вместо "On branch main", это означает, что вы используете более старую версию Git. Вы можете переименовать ветку с помощью команды: git branch -m master main.

2. Отслеживание изменений, а не файлов
Ключевой особенностью Git является то, что он отслеживает изменения в файлах, а не сами файлы целиком. Когда вы выполняете команду git add, вы не просто добавляете файл в репозиторий, а "индексируете" его текущее состояние для последующего коммита.

Это позволяет гибко управлять тем, какие именно изменения войдут в коммит.

Если вы внесли изменения в файл, добавили их в индекс с помощью git add, а затем снова изменили тот же файл, git status покажет, что у вас есть изменения как готовые к коммиту, так и неиндексированные.

3. Коммит изменений
После того как вы проиндексировали нужные изменения с помощью git add, вы можете зафиксировать их в истории проекта с помощью команды git commit.

git commit -m "Ваше сообщение": Создает коммит с коротким однострочным сообщением.

git commit: Открывает текстовый редактор для ввода более подробного сообщения коммита. Это предпочтительный способ, так как он позволяет более полно описать внесенные изменения.

После коммита git status снова покажет, что рабочая директория чиста.

4. Просмотр истории коммитов
Для просмотра истории изменений в репозитории используется команда git log.

git log: Показывает полный список коммитов с хэшами, автором, датой и сообщением.

git log --oneline: Представляет историю в более компактном виде, где каждый коммит отображается в одной строке.

Фильтрация истории: git log можно использовать с различными флагами для фильтрации вывода, например, по автору (--author), по дате (--since, --until) или по количеству коммитов (--max-count).

Форматирование вывода: С помощью флага --pretty=format:"..." можно настроить формат вывода информации о коммитах.

5. Получение старых версий файлов
Git позволяет "путешествовать во времени" и возвращаться к любой предыдущей версии вашего проекта. Для этого используется команда git checkout.

Сначала с помощью git log найдите хэш коммита, к которому вы хотите вернуться.

git checkout <хэш_коммита>: Эта команда переключит ваш проект в состояние, в котором он находился на момент указанного коммита.

Для возврата к самой последней версии проекта используйте команду git switch main (или master в зависимости от названия вашей основной ветки).

6. Создание меток (тегов)
Для того чтобы отметить важные моменты в истории проекта (например, релизные версии), используются метки или теги.

git tag <имя_тега>: Создает тег для текущего коммита. Например, git tag v1.0.

git tag: Показывает список всех созданных тегов.

Теги позволяют легко переключаться между важными версиями проекта с помощью команды git checkout <имя_тега>.

7. Отмена проиндексированных изменений
Если вы добавили изменения в индекс с помощью git add, но передумали их коммитить, вы можете отменить это действие.

git restore --staged <имя_файла>: Убирает изменения из индекса (staging area), но оставляет их в вашем рабочем файле.

git restore <имя_файла>: Если вы хотите полностью отменить изменения и в рабочем файле, вернув его к состоянию последнего коммита, используйте эту команду после предыдущей.